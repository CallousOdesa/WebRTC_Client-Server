#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('webrtc-server:server');
let controller = require('../controllers/controller');
var https = require('https');
var path = require('path');
var fs = require('fs');
var privateKey  = fs.readFileSync(path.join(__dirname, '../cert/key.pem'), 'utf8');
var certificate = fs.readFileSync(path.join(__dirname, '../cert/cert.pem'), 'utf8');
var credentials = {key: privateKey, cert: certificate};
const pkg = require('../package.json');
const program = require('commander');
program
  .version(pkg.version)
  .option('-p, --port [port]', 'port to listen on [8443]', 8443)
  .option('-v, --verbose', 'show verbose output')
  .parse(process.argv)

/**
 * Create HTTPS server.
 */
var httpsServer = new https.createServer(credentials, app);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(program.port || 8443);
app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */

httpsServer.listen(port);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

controller.init(httpsServer);